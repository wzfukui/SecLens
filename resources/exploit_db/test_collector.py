"""Tests for the Exploit-DB collector plugin."""
from __future__ import annotations

from datetime import datetime, timezone
from pathlib import Path

import pytest

from resources.exploit_db.collector import DEFAULT_FEED_URL, ExploitDBCollector

FIXTURE_DIR = Path(__file__).resolve().parent


class MockResponse:
    def __init__(self, *, text: str, status_code: int = 200):
        self._text = text
        self.status_code = status_code

    def raise_for_status(self) -> None:
        if not (200 <= self.status_code < 300):
            raise RuntimeError(f"HTTP status {self.status_code}")

    @property
    def text(self) -> str:
        return self._text


class FakeSession:
    def __init__(self, responses: dict[str, MockResponse]):
        self._responses = responses
        self.headers: dict[str, str] = {}

    def get(self, url: str, timeout: int = 30) -> MockResponse:
        try:
            return self._responses[url]
        except KeyError as exc:
            raise AssertionError(f"Unexpected request URL: {url}") from exc


@pytest.fixture()
def feed_text() -> str:
    return (FIXTURE_DIR / "rss.xml").read_text(encoding="utf-8")


def test_collect_normalizes_entries(tmp_path, feed_text):
    session = FakeSession({DEFAULT_FEED_URL: MockResponse(text=feed_text)})
    state_path = tmp_path / "cursor.txt"
    collector = ExploitDBCollector(session=session, state_path=state_path)

    bulletins = collector.collect(limit=1, force=True)

    assert len(bulletins) == 1
    bulletin = bulletins[0]
    assert bulletin.source.source_slug == "exploit_db"
    assert bulletin.source.external_id == "99999"
    assert str(bulletin.source.origin_url) == "https://www.exploit-db.com/exploits/99999"
    assert bulletin.content.title == "Sample Product 1 - Remote Code Execution"
    assert bulletin.content.summary.startswith("Sample Product 1")
    assert bulletin.content.body_text == bulletin.content.summary
    assert bulletin.content.published_at == datetime(2024, 9, 2, 12, 34, 56, tzinfo=timezone.utc)
    assert "exploit" in bulletin.topics
    assert "exploit_type:remote" in bulletin.labels
    assert bulletin.extra is not None and bulletin.extra.get("category") == "remote"
    assert bulletin.extra.get("guid") == "https://www.exploit-db.com/exploits/99999"
    assert bulletin.raw is not None and "feed_entry" in bulletin.raw


def test_cursor_prevents_reprocessing(tmp_path, feed_text):
    state_path = tmp_path / "cursor.txt"
    session_first = FakeSession({DEFAULT_FEED_URL: MockResponse(text=feed_text)})
    collector_first = ExploitDBCollector(session=session_first, state_path=state_path)

    first_run = collector_first.collect(force=False)
    assert len(first_run) == 2
    assert state_path.exists() and state_path.read_text().strip()

    session_second = FakeSession({DEFAULT_FEED_URL: MockResponse(text=feed_text)})
    collector_second = ExploitDBCollector(session=session_second, state_path=state_path)
    second_run = collector_second.collect(force=False)
    assert second_run == []
