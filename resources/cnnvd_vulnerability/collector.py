"""CNNVD (China National Vulnerability Database) collector plugin."""

from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Iterable, List, Sequence
import json
import logging
import re

import requests
from bs4 import BeautifulSoup

from app.schemas import BulletinCreate, ContentInfo, SourceInfo
from app.time_utils import resolve_published_at

LIST_API_URL = "https://www.cnnvd.org.cn/web/homePage/cnnvdVulList"
DETAIL_API_URL = "https://www.cnnvd.org.cn/web/cnnvdVul/getCnnnvdDetailOnDatasource"
USER_AGENT = "SecLensCNNVDCollector/1.0"
DEFAULT_HEADERS = {
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
    "Content-Type": "application/json;charset=UTF-8",
    "Origin": "https://www.cnnvd.org.cn",
    "Referer": "https://www.cnnvd.org.cn/home/loophole",
    "User-Agent": USER_AGENT,
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
}


@dataclass
class FetchParams:
    """Parameters for fetching CNNVD vulnerability data."""
    
    page_index: int = 1
    page_size: int = 20
    keyword: str = ""
    hazard_level: str = ""
    vul_type: str = ""
    vendor: str = ""
    product: str = ""
    date_type: str = ""


def _format_vulnerability_details(vul_data: dict) -> str:
    """Format vulnerability details according to official display format."""
    hazard_level_map = {
        0: "低危",
        1: "中危", 
        2: "高危",
        3: "超危"
    }
    
    # Extract fields from the vulnerability data
    vul_name = vul_data.get("vulName", "")
    cnnvd_code = vul_data.get("cnnvdCode", "")
    cve_code = vul_data.get("cveCode", "")
    hazard_level = hazard_level_map.get(vul_data.get("hazardLevel", -1), "——")
    vul_type = vul_data.get("vulTypeName", "其他")
    publish_time = vul_data.get("publishTime", "")[:10] if vul_data.get("publishTime") else ""  # Only date part
    update_time = vul_data.get("updateTime", "")[:10] if vul_data.get("updateTime") else ""  # Only date part
    vul_desc = vul_data.get("vulDesc", "")
    affected_vendor = vul_data.get("affectedVendor", "个人开发者")
    refer_url = vul_data.get("referUrl", "")
    
    # Format the content in the official style
    formatted_content = []
    formatted_content.append("漏洞基本信息")
    formatted_content.append("")
    formatted_content.append("漏洞名称")
    formatted_content.append("")
    formatted_content.append(f"{vul_name}")
    formatted_content.append("")
    formatted_content.append("厂商")
    formatted_content.append("")
    formatted_content.append(f"{affected_vendor}")
    formatted_content.append("")
    formatted_content.append("CNNVD编号")
    formatted_content.append("")
    formatted_content.append(f"{cnnvd_code}")
    formatted_content.append("")
    formatted_content.append("危害等级")
    formatted_content.append("")
    formatted_content.append(f"{hazard_level}")
    formatted_content.append("")
    formatted_content.append("CVE编号")
    formatted_content.append("")
    formatted_content.append(f"{cve_code}")
    formatted_content.append("")
    formatted_content.append("漏洞类型")
    formatted_content.append("")
    formatted_content.append(f"{vul_type}")
    formatted_content.append("")
    formatted_content.append("收录时间")
    formatted_content.append("")
    formatted_content.append(f"{publish_time}")
    formatted_content.append("")
    formatted_content.append("更新时间")
    formatted_content.append("")
    formatted_content.append(f"{update_time}")
    formatted_content.append("")
    formatted_content.append("漏洞简介")
    formatted_content.append("")
    formatted_content.append(f"{vul_desc}")
    formatted_content.append("")
    
    if refer_url:
        formatted_content.append("参考网址")
        formatted_content.append("")
        # Format reference URLs by processing the raw string
        lines = [line.strip() for line in refer_url.split('\n') if line.strip()]
        i = 0
        while i < len(lines):
            if lines[i].startswith('来源:'):
                source = lines[i].replace('来源:', '').strip()
                if i + 1 < len(lines) and lines[i + 1].startswith('链接:'):
                    link = lines[i + 1].replace('链接:', '').strip()
                    formatted_content.append(f"来源:{source}")
                    formatted_content.append(f"链接: {link}")
                else:
                    # If no link follows, just add the source
                    formatted_content.append(f"来源:{source}")
                formatted_content.append("")
            i += 1
    
    formatted_content.append("官方补丁")
    formatted_content.append("")
    formatted_content.append("暂无")
    
    return "\n".join(formatted_content).rstrip()


class CNNVDCollector:
    """Fetch and normalize CNNVD vulnerability data."""

    def __init__(self, session: requests.Session | None = None) -> None:
        self.session = session or requests.Session()
        self.session.headers.update(DEFAULT_HEADERS)

    def fetch_list(self, params: FetchParams) -> Sequence[dict]:
        """Fetch vulnerability list from CNNVD."""
        payload = {
            "pageIndex": params.page_index,
            "pageSize": params.page_size,
            "keyword": params.keyword,
            "hazardLevel": params.hazard_level,
            "vulType": params.vul_type,
            "vendor": params.vendor,
            "product": params.product,
            "dateType": params.date_type
        }
        
        response = self.session.post(LIST_API_URL, json=payload, timeout=30)
        response.raise_for_status()
        body = response.json()
        
        if body.get("code") != 200:
            logging.warning(f"CNNVD API returned non-200 code: {body.get('code')}")
            return []
        
        data = body.get("data")
        if not data:
            return []
        
        records = data.get("records", [])
        if not isinstance(records, list):
            return []
        
        return records

    def fetch_detail(self, vul_id: str, vul_type: str, cnnvd_code: str) -> dict | None:
        """Fetch detailed vulnerability information."""
        payload = {
            "id": vul_id,
            "vulType": vul_type,
            "cnnvdCode": cnnvd_code
        }
        
        try:
            response = self.session.post(DETAIL_API_URL, json=payload, timeout=30)
            response.raise_for_status()
            body = response.json()
            
            if body.get("code") != 200:
                logging.warning(f"CNNVD detail API returned non-200 code: {body.get('code')} for id {vul_id}")
                return None
            
            data = body.get("data", {})
            cnnvd_detail = data.get("cnnvdDetail", {})
            
            return cnnvd_detail
        except Exception as e:
            logging.warning(f"Failed to fetch detail for vulnerability {vul_id}: {e}")
            return None

    def normalize(self, item: dict) -> BulletinCreate:
        """Normalize vulnerability data to BulletinCreate model."""
        fetched_at = datetime.now(timezone.utc)
        
        # Extract basic info from list item
        vul_id = item.get("id")
        vul_name = item.get("vulName", "")
        cnnvd_code = item.get("cnnvdCode", "")
        cve_code = item.get("cveCode", "")
        hazard_level = item.get("hazardLevel")
        create_time = item.get("createTime")
        publish_time = item.get("publishTime")
        update_time = item.get("updateTime")
        vul_type = item.get("vulType", "")
        
        # Fetch detailed information
        detail_data = None
        formatted_content = ""
        if vul_id:
            detail_data = self.fetch_detail(vul_id, vul_type, cnnvd_code)
            if detail_data:
                formatted_content = _format_vulnerability_details(detail_data)
        
        # Determine publication time - prioritize publishTime from detail if available
        published_at, time_meta = resolve_published_at(
            "cnnvd_vulnerability",
            [
                (detail_data.get("publishTime") if detail_data else None, "detail.publishTime"),
                (publish_time, "item.publishTime"),
                (create_time, "item.createTime"),
                (update_time, "item.updateTime"),
            ],
            fetched_at=fetched_at,
        )
        
        # Determine severity based on hazard level
        severity = None
        if hazard_level is not None:
            hazard_level_map = {0: "low", 1: "medium", 2: "high", 3: "critical"}
            severity = hazard_level_map.get(hazard_level)
        
        # Create origin URL using the CNNVD code
        origin_url = f"https://www.cnnvd.org.cn/home/loophole/{cnnvd_code}" if cnnvd_code else None
        
        source_info = SourceInfo(
            source_slug="cnnvd_vulnerability",
            external_id=cnnvd_code or vul_id,
            origin_url=origin_url,
        )
        
        content_info = ContentInfo(
            title=vul_name,
            summary=vul_name[:200] if vul_name else "",  # Use truncated title as summary
            body_text=formatted_content,
            published_at=published_at,
            language="zh-CN",
        )
        
        # Build labels
        labels = ["cnnvd"]
        if cve_code:
            labels.append(f"cve:{cve_code}")
        if cnnvd_code:
            labels.append(f"cnnvd:{cnnvd_code}")
        if severity:
            labels.append(f"severity:{severity}")
        if vul_type:
            labels.append(f"vul_type:{vul_type}")
        
        # Build topics
        topics = ["official_bulletin", "vulnerability_alert", "cve"]
        
        extra: dict[str, object] = {
            "hazard_level": hazard_level,
            "cnnvd_code": cnnvd_code,
            "cve_code": cve_code,
            "vul_type": vul_type,
            "create_time": create_time,
            "publish_time": publish_time,
            "update_time": update_time,
        }
        
        if detail_data:
            extra.update({
                "affected_vendor": detail_data.get("affectedVendor"),
                "vul_desc": detail_data.get("vulDesc"),
                "refer_url": detail_data.get("referUrl"),
                "vul_type_name": detail_data.get("vulTypeName"),
                "is_official": detail_data.get("isOfficial"),
                "vendor": detail_data.get("vendor"),
                "detailed_publish_time": detail_data.get("publishTime"),
                "detailed_update_time": detail_data.get("updateTime"),
            })
        
        if time_meta:
            extra["time_meta"] = time_meta

        raw = dict(item)
        if detail_data:
            raw["detail"] = detail_data

        return BulletinCreate(
            source=source_info,
            content=content_info,
            severity=severity,
            fetched_at=fetched_at,
            labels=labels,
            topics=topics,
            extra=extra,
            raw=raw,
        )

    def collect(self, params: FetchParams | None = None) -> List[BulletinCreate]:
        """Collect and normalize CNNVD vulnerability data."""
        params = params or FetchParams()
        items = self.fetch_list(params)
        return [self.normalize(item) for item in items]


def run(
    ingest_url: str | None = None,
    token: str | None = None,
    params: FetchParams | None = None,
) -> tuple[list[BulletinCreate], dict | None]:
    """Entry point for scheduler execution."""
    
    collector = CNNVDCollector()
    bulletins = collector.collect(params=params)
    response_data = None
    if ingest_url:
        session = requests.Session()
        headers = {"Content-Type": "application/json"}
        if token:
            headers["Authorization"] = f"Bearer {token}"
        session.headers.update(headers)
        payload = [bulletin.model_dump(mode="json") for bulletin in bulletins]
        api_response = session.post(ingest_url, json=payload, timeout=30)
        api_response.raise_for_status()
        response_data = api_response.json()
    return bulletins, response_data


__all__ = ["CNNVDCollector", "FetchParams", "run"]
