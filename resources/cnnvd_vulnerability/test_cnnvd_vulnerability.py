"""Tests for the CNNVD vulnerability collector plugin."""

import pytest
from unittest.mock import Mock, patch

from resources.cnnvd_vulnerability.collector import CNNVDCollector, FetchParams, _format_vulnerability_details


def test_format_vulnerability_details():
    """Test the vulnerability details formatting function."""
    sample_vul_data = {
        "vulName": "Test Vulnerability Name",
        "cnnvdCode": "CNNVD-202501-123",
        "cveCode": "CVE-2025-12345",
        "hazardLevel": 2,
        "vulTypeName": "代码问题",
        "publishTime": "2025-01-15 00:00:00",
        "updateTime": "2025-01-20 00:00:00",
        "vulDesc": "This is a test vulnerability description.",
        "affectedVendor": "Test Vendor",
        "referUrl": "来源:github.com\n链接:https://github.com/example\n\n来源:test.com\n链接:https://test.com"
    }
    
    formatted = _format_vulnerability_details(sample_vul_data)
    
    assert "漏洞基本信息" in formatted
    assert "漏洞名称" in formatted
    assert "Test Vulnerability Name" in formatted
    assert "厂商" in formatted
    assert "Test Vendor" in formatted
    assert "CNNVD编号" in formatted
    assert "CNNVD-202501-123" in formatted
    assert "危害等级" in formatted
    assert "高危" in formatted  # hazardLevel 2 maps to 高危
    assert "CVE编号" in formatted
    assert "CVE-2025-12345" in formatted
    assert "漏洞类型" in formatted
    assert "代码问题" in formatted
    assert "收录时间" in formatted
    assert "2025-01-15" in formatted
    assert "更新时间" in formatted
    assert "2025-01-20" in formatted
    assert "漏洞简介" in formatted
    assert "This is a test vulnerability description." in formatted
    assert "参考网址" in formatted
    assert "来源:github.com" in formatted
    assert "链接: https://github.com/example" in formatted
    assert "来源:test.com" in formatted
    assert "链接: https://test.com" in formatted
    assert "官方补丁" in formatted
    assert "暂无" in formatted


def test_format_vulnerability_details_low_hazard():
    """Test hazard level mapping for low hazard."""
    sample_vul_data = {
        "vulName": "Test Vulnerability",
        "cnnvdCode": "CNNVD-202501-123",
        "cveCode": "CVE-2025-12345",
        "hazardLevel": 0,  # Low hazard
        "vulTypeName": "其他",
        "publishTime": "2025-01-15 00:00:00",
        "updateTime": "2025-01-20 00:00:00",
        "vulDesc": "Test description",
        "affectedVendor": "个人开发者",
        "referUrl": ""
    }
    
    formatted = _format_vulnerability_details(sample_vul_data)
    
    assert "危害等级" in formatted
    assert "低危" in formatted  # hazardLevel 0 maps to 低危


def test_format_vulnerability_details_unknown_hazard():
    """Test hazard level mapping for unknown hazard level."""
    sample_vul_data = {
        "vulName": "Test Vulnerability",
        "cnnvdCode": "CNNVD-202501-123",
        "cveCode": "CVE-2025-12345",
        "hazardLevel": 99,  # Unknown hazard level
        "vulTypeName": "其他",
        "publishTime": "2025-01-15 00:00:00",
        "updateTime": "2025-01-20 00:00:00",
        "vulDesc": "Test description",
        "affectedVendor": "Test Vendor",
        "referUrl": ""
    }
    
    formatted = _format_vulnerability_details(sample_vul_data)
    
    assert "危害等级" in formatted
    assert "——" in formatted  # Unknown hazard level maps to ——


def test_fetch_list():
    """Test fetching the list of vulnerabilities."""
    collector = CNNVDCollector()
    
    # Mock the session.post call to return sample data
    mock_response = Mock()
    mock_response.json.return_value = {
        "code": 200,
        "success": True,
        "message": "操作成功",
        "data": {
            "total": 1,
            "records": [
                {
                    "id": "test_vul_id_123",
                    "vulName": "Test Vulnerability",
                    "cnnvdCode": "CNNVD-202501-123",
                    "cveCode": "CVE-2025-12345",
                    "hazardLevel": 2,
                    "createTime": "2025-01-10",
                    "publishTime": "2025-01-15",
                    "updateTime": "2025-01-20",
                    "typeName": None,
                    "vulType": "0"
                }
            ],
            "pageIndex": 1,
            "pageSize": 10
        }
    }
    mock_response.raise_for_status.return_value = None
    
    with patch.object(collector.session, 'post', return_value=mock_response):
        params = FetchParams(page_index=1, page_size=1)
        items = collector.fetch_list(params)
        
        assert len(items) == 1
        assert items[0]["vulName"] == "Test Vulnerability"
        assert items[0]["cnnvdCode"] == "CNNVD-202501-123"


def test_fetch_detail():
    """Test fetching detailed vulnerability information."""
    collector = CNNVDCollector()
    
    # Mock the session.post call for detail API
    mock_response = Mock()
    mock_response.json.return_value = {
        "code": 200,
        "success": True,
        "message": "操作成功",
        "data": {
            "cnnvdDetail": {
                "id": None,
                "vulName": "Test Detailed Vulnerability",
                "cnnvdCode": "CNNVD-202501-123",
                "cveCode": "CVE-2025-12345",
                "publishTime": "2025-01-15 00:00:00",
                "isOfficial": 0,
                "vendor": "1001715",
                "hazardLevel": 2,
                "vulType": "代码问题",
                "vulTypeName": "代码问题",
                "vulDesc": "A detailed description of the vulnerability.",
                "affectedProduct": "",
                "affectedVendor": "Test Vendor",
                "referUrl": "来源:github.com\n链接:https://github.com/example",
                "updateTime": "2025-01-20 00:00:00"
            }
        }
    }
    mock_response.raise_for_status.return_value = None
    
    with patch.object(collector.session, 'post', return_value=mock_response):
        detail = collector.fetch_detail("test_vul_id_123", "0", "CNNVD-202501-123")
        
        assert detail is not None
        assert detail["vulName"] == "Test Detailed Vulnerability"
        assert detail["cveCode"] == "CVE-2025-12345"
        assert detail["affectedVendor"] == "Test Vendor"


def test_collect():
    """Test the full collection process."""
    collector = CNNVDCollector()
    
    # Mock the list API response
    mock_list_response = Mock()
    mock_list_response.json.return_value = {
        "code": 200,
        "success": True,
        "message": "操作成功",
        "data": {
            "total": 1,
            "records": [
                {
                    "id": "test_vul_id_123",
                    "vulName": "Test Vulnerability",
                    "cnnvdCode": "CNNVD-202501-123",
                    "cveCode": "CVE-2025-12345",
                    "hazardLevel": 2,
                    "createTime": "2025-01-10",
                    "publishTime": "2025-01-15",
                    "updateTime": "2025-01-20",
                    "typeName": None,
                    "vulType": "0"
                }
            ],
            "pageIndex": 1,
            "pageSize": 10
        }
    }
    mock_list_response.raise_for_status.return_value = None
    
    # Mock the detail API response
    mock_detail_response = Mock()
    mock_detail_response.json.return_value = {
        "code": 200,
        "success": True,
        "message": "操作成功",
        "data": {
            "cnnvdDetail": {
                "id": None,
                "vulName": "Test Detailed Vulnerability",
                "cnnvdCode": "CNNVD-202501-123",
                "cveCode": "CVE-2025-12345",
                "publishTime": "2025-01-15 00:00:00",
                "isOfficial": 0,
                "vendor": "1001715",
                "hazardLevel": 2,
                "vulType": "代码问题",
                "vulTypeName": "代码问题",
                "vulDesc": "A detailed description of the vulnerability.",
                "affectedProduct": "",
                "affectedVendor": "Test Vendor",
                "referUrl": "来源:github.com\n链接:https://github.com/example",
                "updateTime": "2025-01-20 00:00:00"
            }
        }
    }
    mock_detail_response.raise_for_status.return_value = None
    
    with patch.object(collector.session, 'post', side_effect=[mock_list_response, mock_detail_response]):
        params = FetchParams(page_index=1, page_size=1)
        bulletins = collector.collect(params)
        
        assert len(bulletins) == 1
        bulletin = bulletins[0]
        
        # Check basic fields
        assert bulletin.source.source_slug == "cnnvd_vulnerability"
        assert bulletin.source.external_id == "CNNVD-202501-123"
        assert bulletin.content.title == "Test Vulnerability"
        assert bulletin.severity == "high"  # hazardLevel 2 maps to high
        assert "漏洞基本信息" in bulletin.content.body_text
        assert "漏洞名称" in bulletin.content.body_text
        assert "Test Detailed Vulnerability" in bulletin.content.body_text  # Using detailed name in formatted content
        assert "参考网址" in bulletin.content.body_text
        assert "链接: https://github.com/example" in bulletin.content.body_text
        assert "官方补丁" in bulletin.content.body_text
        assert "暂无" in bulletin.content.body_text
        
        # Check topics
        assert "cve" in bulletin.topics
        assert "vulnerability_alert" in bulletin.topics
        
        # Check labels
        assert "cnnvd" in bulletin.labels
        assert "cve:CVE-2025-12345" in bulletin.labels
        assert "cnnvd:CNNVD-202501-123" in bulletin.labels
        assert "severity:high" in bulletin.labels